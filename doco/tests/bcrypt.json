[
  {
    "tags": [],
    "description": {
      "full": "Copyright (c) 2012 Nevins Bartolomeo <nevins.bartolomeo@gmail.com>\n Copyright (c) 2012 Shane Girish <shaneGirish@gmail.com>\n Copyright (c) 2013 Daniel Wirtz <dcode@dcode.io>\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n 1. Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n 3. The name of the author may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
      "summary": "Copyright (c) 2012 Nevins Bartolomeo <nevins.bartolomeo@gmail.com>\n Copyright (c) 2012 Shane Girish <shaneGirish@gmail.com>\n Copyright (c) 2013 Daniel Wirtz <dcode@dcode.io>",
      "body": " Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n 1. Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n 3. The name of the author may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    },
    "ignore": false
  },
  {
    "tags": [],
    "description": {
      "full": "@license dojo-bcrypt (c) 2013 Daniel Wirtz <dcode@dcode.io>\nReleased under the Apache License, Version 2.0\nsee: https://github.com/dcodeIO/dojo for details",
      "summary": "@license dojo-bcrypt (c) 2013 Daniel Wirtz <dcode@dcode.io>\nReleased under the Apache License, Version 2.0\nsee: https://github.com/dcodeIO/dojo for details",
      "body": ""
    },
    "ignore": false
  },
  {
    "tags": [],
    "description": {
      "full": "@expose",
      "summary": "@expose",
      "body": ""
    },
    "ignore": false,
    "code": "module.exports = (function() {\n\n    var crypto = require(\"crypto\");",
    "ctx": {
      "type": "property",
      "receiver": "module",
      "name": "exports",
      "value": "(function() {",
      "string": "module.exports"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "unknown": true
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "@type {Array.<string>}",
      "summary": "@type {Array.<string>}",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var BASE64_CODE = ['.', '/', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\n        'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\n        'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\n        'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\n        'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8',\n        '9'];",
    "ctx": {
      "type": "declaration",
      "name": "BASE64_CODE",
      "value": "['.', '/', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',",
      "string": "BASE64_CODE"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "unknown": true
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "@type {Array.<number>}",
      "summary": "@type {Array.<number>}",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var BASE64_INDEX = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1,\n        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1, -1,\n        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n        21, 22, 23, 24, 25, 26, 27, -1, -1, -1, -1, -1, -1, 28, 29, 30, 31,\n        32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n        49, 50, 51, 52, 53, -1, -1, -1, -1, -1];",
    "ctx": {
      "type": "declaration",
      "name": "BASE64_INDEX",
      "value": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,",
      "string": "BASE64_INDEX"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "types": [
          "Object.<string,function(string, number)>"
        ]
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "Length-delimited base64 encoder and decoder.",
      "summary": "Length-delimited base64 encoder and decoder.",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var base64 = {};",
    "ctx": {
      "type": "declaration",
      "name": "base64",
      "value": "{}",
      "string": "base64"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Array.<number>"
        ],
        "optional": false,
        "name": "b",
        "description": "Byte array"
      },
      {
        "type": "param",
        "types": [
          "number"
        ],
        "optional": false,
        "name": "len",
        "description": "Maximum input length"
      },
      {
        "type": "returns",
        "types": [
          "string"
        ],
        "description": ""
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "Encodes a byte array to base64 with up to len bytes of input.",
      "summary": "Encodes a byte array to base64 with up to len bytes of input.",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "base64.encode = function(b, len) {\n        var off = 0;\n        var rs = [];\n        var c1;\n        var c2;\n        if (len <= 0 || len > b.length) {\n            throw(new Error(\"Invalid 'len': \"+len));\n        }\n        while (off < len) {\n            c1 = b[off++] & 0xff;\n            rs.push(BASE64_CODE[(c1 >> 2) & 0x3f]);\n            c1 = (c1 & 0x03) << 4;\n            if (off >= len) {\n                rs.push(BASE64_CODE[c1 & 0x3f]);\n                break;\n            }\n            c2 = b[off++] & 0xff;\n            c1 |= (c2 >> 4) & 0x0f;\n            rs.push(BASE64_CODE[c1 & 0x3f]);\n            c1 = (c2 & 0x0f) << 2;\n            if (off >= len) {\n                rs.push(BASE64_CODE[c1 & 0x3f]);\n                break;\n            }\n            c2 = b[off++] & 0xff;\n            c1 |= (c2 >> 6) & 0x03;\n            rs.push(BASE64_CODE[c1 & 0x3f]);\n            rs.push(BASE64_CODE[c2 & 0x3f]);\n        }\n        return rs.join('');\n    };",
    "ctx": {
      "type": "method",
      "receiver": "base64",
      "name": "encode",
      "string": "base64.encode()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "string"
        ],
        "optional": false,
        "name": "s",
        "description": "String to decode"
      },
      {
        "type": "param",
        "types": [
          "number"
        ],
        "optional": false,
        "name": "len",
        "description": "Maximum output length"
      },
      {
        "type": "returns",
        "types": [
          "Array.<number>"
        ],
        "description": ""
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "Decodes a base64 encoded string to up to len bytes of output.",
      "summary": "Decodes a base64 encoded string to up to len bytes of output.",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "base64.decode = function(s, len) {\n        var off = 0;\n        var slen = s.length;\n        var olen = 0;\n        var rs = [];\n        var c1, c2, c3, c4, o, code;\n        if (len <= 0) throw(new Error(\"Illegal 'len': \"+len));\n        while (off < slen - 1 && olen < len) {\n            code = s.charCodeAt(off++);\n            c1 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            code = s.charCodeAt(off++);\n            c2 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            if (c1 == -1 || c2 == -1) {\n                break;\n            }\n            o = (c1 << 2) >>> 0;\n            o |= (c2 & 0x30) >> 4;\n            rs.push(String.fromCharCode(o));\n            if (++olen >= len || off >= slen) {\n                break;\n            }\n            code = s.charCodeAt(off++);\n            c3 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            if (c3 == -1) {\n                break;\n            }\n            o = ((c2 & 0x0f) << 4) >>> 0;\n            o |= (c3 & 0x3c) >> 2;\n            rs.push(String.fromCharCode(o));\n            if (++olen >= len || off >= slen) {\n                break;\n            }\n            code = s.charCodeAt(off++);\n            c4 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            o = ((c3 & 0x03) << 6) >>> 0;\n            o |= c4;\n            rs.push(String.fromCharCode(o));\n            ++olen;\n        }\n        var res = [];\n        for (off = 0; off<olen; off++) {\n            res.push(rs[off].charCodeAt(0));\n        }\n        return res;\n    };",
    "ctx": {
      "type": "method",
      "receiver": "base64",
      "name": "decode",
      "string": "base64.decode()"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "types": [
          "Object.<string,*>"
        ]
      }
    ],
    "description": {
      "full": "bcrypt namespace.",
      "summary": "bcrypt namespace.",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "var bcrypt = {};",
    "ctx": {
      "type": "declaration",
      "name": "bcrypt",
      "value": "{}",
      "string": "bcrypt"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "unknown": true
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "@type {number}",
      "summary": "@type {number}",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var BCRYPT_SALT_LEN = 16;",
    "ctx": {
      "type": "declaration",
      "name": "BCRYPT_SALT_LEN",
      "value": "16",
      "string": "BCRYPT_SALT_LEN"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "unknown": true
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "@type {number}",
      "summary": "@type {number}",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var GENSALT_DEFAULT_LOG2_ROUNDS = 10;",
    "ctx": {
      "type": "declaration",
      "name": "GENSALT_DEFAULT_LOG2_ROUNDS",
      "value": "10",
      "string": "GENSALT_DEFAULT_LOG2_ROUNDS"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "unknown": true
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "@type {number}",
      "summary": "@type {number}",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var BLOWFISH_NUM_ROUNDS = 16;",
    "ctx": {
      "type": "declaration",
      "name": "BLOWFISH_NUM_ROUNDS",
      "value": "16",
      "string": "BLOWFISH_NUM_ROUNDS"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "unknown": true
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "@type {number}",
      "summary": "@type {number}",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var MAX_EXECUTION_TIME = 100;",
    "ctx": {
      "type": "declaration",
      "name": "MAX_EXECUTION_TIME",
      "value": "100",
      "string": "MAX_EXECUTION_TIME"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "unknown": true
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "@type {Array.<number>}",
      "summary": "@type {Array.<number>}",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var P_ORIG = [\n        0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822,\n        0x299f31d0, 0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377,\n        0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5,\n        0xb5470917, 0x9216d5d9, 0x8979fb1b\n    ];",
    "ctx": {
      "type": "declaration",
      "name": "P_ORIG",
      "value": "[",
      "string": "P_ORIG"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "unknown": true
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "@type {Array.<number>}",
      "summary": "@type {Array.<number>}",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var S_ORIG = [\n        0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed,\n        0x6a267e96, 0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7,\n        0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3,\n        0xf4933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,\n        0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013, 0xc5d1b023,\n        0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,\n        0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda,\n        0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,\n        0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af,\n        0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c55d, 0x741831f6,\n        0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381,\n        0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,\n        0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d,\n        0xe98575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5,\n        0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa4842004, 0x69c8f04a,\n        0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,\n        0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3, 0x6eef0b6c,\n        0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,\n        0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3,\n        0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,\n        0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724,\n        0xd00a1248, 0xdb0fead3, 0x49f1c09b, 0x075372c9, 0x80991b7b,\n        0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd,\n        0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,\n        0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f,\n        0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd,\n        0x660f2807, 0x192e4bb3, 0xc0cba857, 0x45c8740f, 0xd20b5f39,\n        0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,\n        0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df,\n        0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,\n        0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e,\n        0xdf1769db, 0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,\n        0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98,\n        0xfd2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565,\n        0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33, 0x62fb1341,\n        0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,\n        0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0,\n        0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64,\n        0x8888b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191,\n        0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,\n        0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0,\n        0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,\n        0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5,\n        0xfb9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,\n        0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af, 0x2464369b,\n        0xf009b91e, 0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f,\n        0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9, 0x11c81968,\n        0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,\n        0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5,\n        0x571be91f, 0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6,\n        0xff34052e, 0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x08ba4799,\n        0x6e85076a, 0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,\n        0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266, 0xecaa8c71,\n        0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29,\n        0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6,\n        0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,\n        0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f,\n        0x3ebaefc9, 0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286,\n        0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c, 0x8e7d44ec,\n        0x5716f2b8, 0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,\n        0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9,\n        0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc,\n        0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e,\n        0xa4751e41, 0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,\n        0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf, 0x2cb81290,\n        0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810,\n        0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6,\n        0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,\n        0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847,\n        0x3215d908, 0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451,\n        0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55, 0x81ac77d6,\n        0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,\n        0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570,\n        0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa,\n        0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978,\n        0x9c10b36a, 0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,\n        0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960, 0x5223a708,\n        0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883,\n        0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185,\n        0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,\n        0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830,\n        0xeb61bd96, 0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239,\n        0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7, 0x9cab5cab,\n        0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,\n        0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19,\n        0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77,\n        0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1,\n        0x7858ba99, 0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,\n        0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128, 0x58ebf2ef,\n        0x34c6ffea, 0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3,\n        0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15,\n        0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,\n        0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2,\n        0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492,\n        0x47848a0b, 0x5692b285, 0x095bbf00, 0xad19489d, 0x1462b174,\n        0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,\n        0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759,\n        0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e,\n        0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc,\n        0x800bcadc, 0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,\n        0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340, 0xc5c43465,\n        0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a,\n        0xe6e39f2b, 0xdb83adf7, 0xe93d5a68, 0x948140f7, 0xf64c261c,\n        0x94692934, 0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,\n        0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af, 0x1e39f62e,\n        0x97244546, 0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af,\n        0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0,\n        0x31cb8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,\n        0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb, 0x68dc1462,\n        0xd7486900, 0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c,\n        0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec, 0xce78a399,\n        0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,\n        0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74,\n        0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397,\n        0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7,\n        0xd096954b, 0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,\n        0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c, 0xfdf8e802,\n        0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22,\n        0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f, 0x404779a4,\n        0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,\n        0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2,\n        0x02e1329e, 0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1,\n        0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99, 0xde720c8c,\n        0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,\n        0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341,\n        0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8,\n        0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b,\n        0xdcd0e804, 0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,\n        0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3, 0xbb132f88,\n        0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979,\n        0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc,\n        0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,\n        0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659,\n        0x0a121386, 0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f,\n        0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086, 0x60787bf8,\n        0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,\n        0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be,\n        0xbde8ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2,\n        0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255,\n        0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,\n        0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c, 0xb90bace1,\n        0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09,\n        0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025,\n        0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,\n        0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01,\n        0xa70683fa, 0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641,\n        0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0, 0x006058aa,\n        0x30dc7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,\n        0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76, 0x6f05e409,\n        0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9,\n        0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5, 0xd83d7cd3,\n        0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,\n        0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837, 0xd79a3234,\n        0x92638212, 0x670efa8e, 0x406000e0, 0x3a39ce37, 0xd3faf5cf,\n        0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742, 0xd3822740,\n        0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,\n        0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f,\n        0xbc946e79, 0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d,\n        0xd5730a1d, 0x4cd04dc6, 0x2939bbdb, 0xa9ba4650, 0xac9526e8,\n        0xbe5ee304, 0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,\n        0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4, 0x83c061ba,\n        0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1,\n        0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69,\n        0x77fa0a59, 0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,\n        0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a,\n        0x017da67d, 0xd1cf3ed6, 0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b,\n        0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6, 0x47b0acfd,\n        0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,\n        0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4,\n        0x88f46dba, 0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2,\n        0x97271aec, 0xa93a072a, 0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb,\n        0x26dcf319, 0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,\n        0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f, 0x4de81751,\n        0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce,\n        0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369,\n        0x6413e680, 0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,\n        0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae, 0x5bbef7dd,\n        0x1b588d40, 0xccd2017f, 0x6bb4e3bb, 0xdda26a7e, 0x3a59ff45,\n        0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb, 0x8d6612ae,\n        0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,\n        0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08,\n        0x4eb4e2cc, 0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d,\n        0x06b89fb4, 0xce6ea048, 0x6f3f3b82, 0x3520ab82, 0x011a1d4b,\n        0x277227f8, 0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,\n        0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9, 0xe01cc87e,\n        0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a,\n        0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c,\n        0xe0b12b4f, 0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,\n        0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525, 0xfae59361,\n        0xceb69ceb, 0xc2a86459, 0x12baa8d1, 0xb6c1075e, 0xe3056a0c,\n        0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b, 0x4c98a0be,\n        0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,\n        0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d,\n        0x9b992f2e, 0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891,\n        0xce6279cf, 0xcd3e7e6f, 0x1618b166, 0xfd2c1d05, 0x848fd2c5,\n        0xf6fb2299, 0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,\n        0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc, 0xde966292,\n        0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a,\n        0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2,\n        0x35bdd2f6, 0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,\n        0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0, 0xba38209c,\n        0xf746ce76, 0x77afa1c5, 0x20756060, 0x85cbfe4e, 0x8ae88dd8,\n        0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c, 0x01c36ae4,\n        0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,\n        0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6\n    ];",
    "ctx": {
      "type": "declaration",
      "name": "S_ORIG",
      "value": "[",
      "string": "S_ORIG"
    }
  },
  {
    "tags": [
      {
        "type": "const",
        "unknown": true
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "@type {Array.<number>}",
      "summary": "@type {Array.<number>}",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var C_ORIG = [\n        0x4f727068, 0x65616e42, 0x65686f6c, 0x64657253, 0x63727944,\n        0x6f756274\n    ];",
    "ctx": {
      "type": "declaration",
      "name": "C_ORIG",
      "value": "[",
      "string": "C_ORIG"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "number"
        ],
        "optional": false,
        "name": "off",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Array.<number>"
        ],
        "optional": false,
        "name": "P",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Array.<number>"
        ],
        "optional": false,
        "name": "S",
        "description": ""
      },
      {
        "type": "returns",
        "types": [
          "Array.<number>"
        ],
        "description": ""
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "@param {Array.<number>} lr",
      "summary": "@param {Array.<number>} lr",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function _encipher(lr, off, P, S) { // This is our bottleneck: 1714/1905 ticks / 90% - see profile.txt\n        var n;\n        var l = lr[off];\n        var r = lr[off + 1];\n\n        l ^= P[0];\n        for (var i=0; i<=BLOWFISH_NUM_ROUNDS-2;) {\n            // Feistel substitution on left word\n            n  = S[(l >> 24) & 0xff];\n            n += S[0x100 | ((l >> 16) & 0xff)];\n            n ^= S[0x200 | ((l >> 8) & 0xff)];\n            n += S[0x300 | (l & 0xff)];\n            r ^= n ^ P[++i];\n\n            // Feistel substitution on right word\n            n  = S[(r >> 24) & 0xff];\n            n += S[0x100 | ((r >> 16) & 0xff)];\n            n ^= S[0x200 | ((r >> 8) & 0xff)];\n            n += S[0x300 | (r & 0xff)];\n            l ^= n ^ P[++i];\n        }\n        lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];\n        lr[off + 1] = l;\n        return lr;\n    }",
    "ctx": {
      "type": "function",
      "name": "_encipher",
      "string": "_encipher()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "number"
        ],
        "optional": false,
        "name": "offp",
        "description": ""
      },
      {
        "type": "returns",
        "types": [
          "{key: number, offp: number}"
        ],
        "description": ""
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "@param {Array.<number>} data",
      "summary": "@param {Array.<number>} data",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function _streamtoword(data, offp) {\n        var i;\n        var word = 0;\n        for (i = 0; i < 4; i++) {\n            word = (word << 8) | (data[offp] & 0xff);\n            offp = (offp + 1) % data.length;\n        }\n        return { key: word, offp: offp };\n    }",
    "ctx": {
      "type": "function",
      "name": "_streamtoword",
      "string": "_streamtoword()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Array.<number>"
        ],
        "optional": false,
        "name": "P",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Array.<number>"
        ],
        "optional": false,
        "name": "S",
        "description": ""
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "@param {Array.<number>} key",
      "summary": "@param {Array.<number>} key",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function _key(key, P, S) {\n        var offset = 0;\n        var lr = new Array(0x00000000, 0x00000000);\n        var plen = P.length;\n        var slen = S.length;\n        for (var i = 0; i < plen; i++) {\n            var sw = _streamtoword(key, offset);\n            offset = sw.offp;\n            P[i] = P[i] ^ sw.key;\n        }\n        for (i = 0; i < plen; i += 2) {\n            lr = _encipher(lr, 0, P, S);\n            P[i] = lr[0];\n            P[i + 1] = lr[1];\n        }\n\n        for (i = 0; i < slen; i += 2) {\n            lr = _encipher(lr, 0, P, S);\n            S[i] = lr[0];\n            S[i + 1] = lr[1];\n        }\n    }",
    "ctx": {
      "type": "function",
      "name": "_key",
      "string": "_key()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Array.<number>"
        ],
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Array.<number>"
        ],
        "optional": false,
        "name": "P",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Array.<number>"
        ],
        "optional": false,
        "name": "S",
        "description": ""
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "@param {Array.<number>} data",
      "summary": "@param {Array.<number>} data",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function _ekskey(data, key, P, S) {\n        var offp = 0;\n        var lr = new Array(0x00000000, 0x00000000);\n        var plen = P.length;\n        var slen = S.length;\n        var sw;\n        for (var i = 0; i < plen; i++) {\n            sw = _streamtoword(key, offp);\n            offp = sw.offp;\n            P[i] = P[i] ^ sw.key;\n        }\n        offp = 0;\n        for (i = 0; i < plen; i += 2) {\n            sw = _streamtoword(data, offp);\n            offp = sw.offp;\n            lr[0] ^= sw.key;\n\n            sw = _streamtoword(data, offp);\n            offp = sw.offp;\n            lr[1] ^= sw.key;\n\n            lr = _encipher(lr, 0, P, S);\n            P[i] = lr[0];\n            P[i + 1] = lr[1];\n        }\n        for (i = 0; i < slen; i += 2) {\n            sw = _streamtoword(data, offp);\n            offp = sw.offp;\n            lr[0] ^= sw.key;\n\n            sw = _streamtoword(data, offp);\n            offp = sw.offp;\n            lr[1] ^= sw.key;\n\n            lr = _encipher(lr, 0, P, S);\n            S[i] = lr[0];\n            S[i + 1] = lr[1];\n        }\n    }",
    "ctx": {
      "type": "function",
      "name": "_ekskey",
      "string": "_ekskey()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Array.<number>"
        ],
        "optional": false,
        "name": "b",
        "description": "Bytes to crypt"
      },
      {
        "type": "param",
        "types": [
          "Array.<number>"
        ],
        "optional": false,
        "name": "salt",
        "description": "Salt bytes to use"
      },
      {
        "type": "param",
        "types": [
          "number"
        ],
        "optional": false,
        "name": "rounds",
        "description": "Number of rounds"
      },
      {
        "type": "param",
        "types": [
          "function(Error, Array.<number>)"
        ],
        "optional": true,
        "name": "callback",
        "description": "Callback receiving the error, if any, and the resulting bytes. If"
      },
      {
        "type": "omitted, the operation will be performed synchronously.",
        "unknown": true
      },
      {
        "type": "returns",
        "types": [
          "Array.<number>"
        ],
        "description": "Resulting bytes or if callback has been omitted, otherwise null"
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "Internaly crypts a string.",
      "summary": "Internaly crypts a string.",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function _crypt(b, salt, rounds, callback) {\n        var cdata = C_ORIG.slice();\n        var clen = cdata.length;\n\n        // Validate\n        if (rounds < 4 || rounds > 31) {\n            throw(new Error(\"Illegal number of rounds: \"+rounds));\n        }\n        if (salt.length != BCRYPT_SALT_LEN) {\n            throw(new Error(\"Illegal salt length: \"+salt.length+\" != \"+BCRYPT_SALT_LEN));\n        }\n        rounds = 1 << rounds;\n        var P = P_ORIG.slice();\n        var S = S_ORIG.slice();\n\n        _ekskey(salt, b, P, S);\n\n        var i = 0, j;",
    "ctx": {
      "type": "function",
      "name": "_crypt",
      "string": "_crypt()"
    }
  },
  {
    "tags": [
      {
        "type": "returns",
        "types": [
          "Array.<number>"
        ],
        "description": "Resulting array if callback has been omitted, otherwise null"
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "Calcualtes the next round.",
      "summary": "Calcualtes the next round.",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function next() {\n            if (i < rounds) {\n                var start = new Date();\n                for (; i < rounds;) {\n                    i = i + 1;\n                    _key(b, P, S);\n                    _key(salt, P, S);\n                    if (Date.now() - start > MAX_EXECUTION_TIME) { // TODO (dcode): Is this necessary?\n                        break;\n                    }\n                }\n            } else {\n                for (i = 0; i < 64; i++) {\n                    for (j = 0; j < (clen >> 1); j++) {\n                        _encipher(cdata, j << 1, P, S);\n                    }\n                }\n                var ret = [];\n                for (i = 0; i < clen; i++) {\n                    ret.push(((cdata[i] >> 24) & 0xff) >>> 0);\n                    ret.push(((cdata[i] >> 16) & 0xff) >>> 0);\n                    ret.push(((cdata[i] >> 8) & 0xff) >>> 0);\n                    ret.push((cdata[i] & 0xff) >>> 0);\n                }\n                if (callback) {\n                    callback(null, ret);\n                    return null;\n                } else {\n                    return ret;\n                }\n            }\n            if (callback) {\n                process.nextTick(next);\n            }\n            return null;\n        }\n\n        // Async\n        if (typeof callback != 'undefined') {\n            next();\n            return null;\n            // Sync\n        } else {\n            var res;\n            while (true) {\n                if ((res = next()) !== null) {\n                    return res;\n                }\n            }\n        }\n    }",
    "ctx": {
      "type": "function",
      "name": "next",
      "string": "next()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "string"
        ],
        "optional": false,
        "name": "s",
        "description": "String to hash"
      },
      {
        "type": "param",
        "types": [
          "?string"
        ],
        "optional": false,
        "name": "salt",
        "description": "Salt to use, actually never null"
      },
      {
        "type": "param",
        "types": [
          "function(Error, ?string)"
        ],
        "optional": true,
        "name": "callback",
        "description": "Callback receiving the error, if any, and the resulting hash. If omitted,"
      },
      {
        "type": "hashing is perormed synchronously.",
        "unknown": true
      },
      {
        "type": "returns",
        "types": [
          "?string"
        ],
        "description": "Resulting hash if callback has been omitted, else null"
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "Internally hashes a string.",
      "summary": "Internally hashes a string.",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function _hash(s, salt, callback) {\n\n        // Validate the salt\n        var minor, offset;\n        if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {\n            throw(new Error(\"Invalid salt version: \"+salt.substring(0,2)));\n        }\n        if (salt.charAt(2) == '$') {\n            minor = String.fromCharCode(0);\n            offset = 3;\n        } else {\n            minor = salt.charAt(2);\n            if (minor != 'a' || salt.charAt(3) != '$') {\n                throw(new Error(\"Invalid salt revision: \"+salt.substring(2,4)));\n            }\n            offset = 4;\n        }\n\n        // Extract number of rounds\n        if (salt.charAt(offset + 2) > '$') {\n            throw(new Error(\"Missing salt rounds\"));\n        }\n        var r1 = parseInt(salt.substring(offset, offset + 1), 10) * 10;\n        var r2 = parseInt(salt.substring(offset + 1, offset + 2), 10);\n        var rounds = r1 + r2;\n        var real_salt = salt.substring(offset + 3, offset + 25);\n        s += minor >= 'a' ? \"\\000\" : \"\";\n\n        var buf = new Buffer(s); // TODO (dcode): What is this good for? Getting bytes?\n        var passwordb = [];\n        var saltb = [];\n        for (var r=0; r<buf.length; r++) {\n            passwordb.push(buf[r]);\n        }\n        saltb = base64.decode(real_salt, BCRYPT_SALT_LEN);",
    "ctx": {
      "type": "function",
      "name": "_hash",
      "string": "_hash()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Array.<number>"
        ],
        "optional": false,
        "name": "bytes",
        "description": "Byte array"
      },
      {
        "type": "returns",
        "types": [
          "string"
        ],
        "description": ""
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "Finishs hashing.",
      "summary": "Finishs hashing.",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function finish(bytes) {\n            var res = [];\n            res.push(\"$2\");\n            if (minor >= 'a') res.push(minor);\n            res.push(\"$\");\n            if (rounds < 10) res.push(\"0\");\n            res.push(rounds.toString());\n            res.push(\"$\");\n            res.push(base64.encode(saltb, saltb.length));\n            res.push(base64.encode(bytes, C_ORIG.length * 4 - 1));\n            return res.join('');\n        }\n\n        // Sync\n        if (typeof callback == 'undefined') {\n            return finish(_crypt(passwordb, saltb, rounds));\n\n            // Async\n        } else {\n            _crypt(passwordb, saltb, rounds, function(err, bytes) {\n                if (err) {\n                    callback(err, null);\n                } else {\n                    callback(null, finish(bytes));\n                }\n            });\n            return null;\n        }\n    }",
    "ctx": {
      "type": "function",
      "name": "finish",
      "string": "finish()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "number"
        ],
        "optional": false,
        "name": "rounds",
        "description": "Number of rounds to use"
      },
      {
        "type": "returns",
        "types": [
          "string"
        ],
        "description": "Salt"
      },
      {
        "type": "throws",
        "types": [
          "Error"
        ],
        "description": "If anything goes wrong"
      },
      {
        "type": "private",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "Internally generates a salt.",
      "summary": "Internally generates a salt.",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function _gensalt(rounds) {\n        rounds = rounds || 10;\n        if (rounds < 4 || rounds > 31) {\n            throw(new Error(\"Illegal number of rounds: \"+rounds));\n        }\n        var salt = [];\n        salt.push(\"$2a$\");\n        if (rounds < GENSALT_DEFAULT_LOG2_ROUNDS) salt.push(\"0\");\n        salt.push(rounds.toString());\n        salt.push('$');\n        try {\n            salt.push(base64.encode(crypto.randomBytes(BCRYPT_SALT_LEN), BCRYPT_SALT_LEN));\n            return salt.join('');\n        } catch(err) {\n            throw(err);\n        }\n    }",
    "ctx": {
      "type": "function",
      "name": "_gensalt",
      "string": "_gensalt()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "number"
        ],
        "optional": true,
        "name": "rounds",
        "description": "Number of rounds to use, defaults to 10 if omitted"
      },
      {
        "type": "param",
        "types": [
          "number"
        ],
        "optional": true,
        "name": "seed_length",
        "description": "Not supported."
      },
      {
        "type": "returns",
        "types": [
          "string"
        ],
        "description": "Resulting salt"
      },
      {
        "type": "expose",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "Synchronously generates a salt.",
      "summary": "Synchronously generates a salt.",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "bcrypt.genSaltSync = function(rounds, seed_length) {\n        if (!rounds) rounds = 10;\n        return _gensalt(rounds);\n    };",
    "ctx": {
      "type": "method",
      "receiver": "bcrypt",
      "name": "genSaltSync",
      "string": "bcrypt.genSaltSync()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "(number",
          "function(Error, ?string))"
        ],
        "optional": true,
        "name": "rounds",
        "description": "Number of rounds to use, defaults to 10 if omitted"
      },
      {
        "type": "param",
        "types": [
          "(number",
          "function(Error, ?string))"
        ],
        "optional": true,
        "name": "seed_length",
        "description": "Not supported."
      },
      {
        "type": "param",
        "types": [
          "function(Error, ?string)"
        ],
        "optional": true,
        "name": "callback",
        "description": "Callback receiving the error, if any, and the resulting salt"
      },
      {
        "type": "expose",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "Asynchronously generates a salt.",
      "summary": "Asynchronously generates a salt.",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "bcrypt.genSalt = function(rounds, seed_length, callback) {\n        if (typeof seed_length == 'function') {\n            callback = seed_length;\n            seed_length = -1; // Not supported.\n        }\n        var rnd; // Hello closure\n        if (typeof rounds == 'function') {\n            callback = rounds;\n            rnd = GENSALT_DEFAULT_LOG2_ROUNDS;\n        } else {\n            rnd = parseInt(rounds, 10);\n        }\n        if (typeof callback != 'function') {\n            throw(new Error(\"Illegal or missing 'callback': \"+callback));\n        }\n        process.nextTick(function() { // Pretty thin, but salting is fast enough\n            try {\n                var res = bcrypt.genSaltSync(rnd);\n                callback(null, res);\n            } catch(err) {\n                callback(err, null);\n            }\n        });\n    };",
    "ctx": {
      "type": "method",
      "receiver": "bcrypt",
      "name": "genSalt",
      "string": "bcrypt.genSalt()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "string"
        ],
        "optional": false,
        "name": "s",
        "description": "String to hash"
      },
      {
        "type": "param",
        "types": [
          "(number",
          "string)"
        ],
        "optional": true,
        "name": "salt",
        "description": "Salt length to generate or salt to use, default to 10"
      },
      {
        "type": "returns",
        "types": [
          "?string"
        ],
        "description": "Resulting hash, actually never null"
      },
      {
        "type": "expose",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "Synchronously generates a hash for the given string.",
      "summary": "Synchronously generates a hash for the given string.",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "bcrypt.hashSync = function(s, salt) {\n        if (!salt) salt = GENSALT_DEFAULT_LOG2_ROUNDS;\n        if (typeof salt == 'number') {\n            salt = bcrypt.genSaltSync(salt);\n        }\n        return _hash(s, salt);\n    };",
    "ctx": {
      "type": "method",
      "receiver": "bcrypt",
      "name": "hashSync",
      "string": "bcrypt.hashSync()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "string"
        ],
        "optional": false,
        "name": "s",
        "description": "String to hash"
      },
      {
        "type": "param",
        "types": [
          "number",
          "string"
        ],
        "optional": false,
        "name": "salt",
        "description": "Salt length to generate or salt to use"
      },
      {
        "type": "param",
        "types": [
          "function(Error, ?string)"
        ],
        "optional": false,
        "name": "callback",
        "description": "Callback receiving the error, if any, and the resulting hash"
      },
      {
        "type": "expose",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "Asynchronously generates a hash for the given string.",
      "summary": "Asynchronously generates a hash for the given string.",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "bcrypt.hash = function(s, salt, callback) {\n        if (typeof callback != 'function') {\n            throw(new Error(\"Illegal 'callback': \"+callback));\n        }\n        if (typeof salt == 'number') {\n            bcrypt.genSalt(salt, function(err, salt) {\n                _hash(s, salt, callback);\n            });\n        } else {\n            _hash(s, salt, callback);\n        }\n    };",
    "ctx": {
      "type": "method",
      "receiver": "bcrypt",
      "name": "hash",
      "string": "bcrypt.hash()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "string"
        ],
        "optional": false,
        "name": "s",
        "description": "String to compare"
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "optional": false,
        "name": "hash",
        "description": "Hash to test against"
      },
      {
        "type": "returns",
        "types": [
          "boolean"
        ],
        "description": "true if matching, otherwise false"
      },
      {
        "type": "throws",
        "types": [
          "Error"
        ],
        "description": "If an argument is illegal"
      },
      {
        "type": "expose",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "Synchronously tests a string against a hash.",
      "summary": "Synchronously tests a string against a hash.",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "bcrypt.compareSync = function(s, hash) {\n        if(typeof s != \"string\" ||  typeof hash != \"string\") {\n            throw(new Error(\"Illegal argument types: \"+(typeof s)+', '+(typeof hash)));\n        }\n        if(hash.length != 60) {\n            throw(new Error(\"Illegal hash length: \"+hash.length+\" != 60\"));\n        }\n        var comp = bcrypt.hashSync(s, hash.substr(0, hash.length-31));\n        var same = comp.length == hash.length;\n        var max_length = (comp.length < hash.length) ? comp.length : hash.length;\n\n        // to prevent timing attacks, should check entire string\n        // don't exit after found to be false\n        for (var i = 0; i < max_length; ++i) {\n            if (comp.length >= i && hash.length >= i && comp[i] != hash[i]) {\n                same = false;\n            }\n        }\n        return same;\n    };",
    "ctx": {
      "type": "method",
      "receiver": "bcrypt",
      "name": "compareSync",
      "string": "bcrypt.compareSync()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "string"
        ],
        "optional": false,
        "name": "s",
        "description": "Data to compare"
      },
      {
        "type": "param",
        "types": [
          "string"
        ],
        "optional": false,
        "name": "hash",
        "description": "Data to be compared to"
      },
      {
        "type": "param",
        "types": [
          "function(Error, boolean)"
        ],
        "optional": false,
        "name": "callback",
        "description": "Callback receiving the error, if any, otherwise the result"
      },
      {
        "type": "throws",
        "types": [
          "Error"
        ],
        "description": "If the callback argument is invalid"
      },
      {
        "type": "expose",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "Asynchronously compares the given data against the given hash.",
      "summary": "Asynchronously compares the given data against the given hash.",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "bcrypt.compare = function(s, hash, callback) {\n        if (typeof callback != 'function') {\n            throw(new Error(\"Illegal 'callback': \"+callback));\n        }\n        bcrypt.hash(s, hash.substr(0, 29), function(err, comp) {\n            callback(err, hash === comp);\n        });\n    };",
    "ctx": {
      "type": "method",
      "receiver": "bcrypt",
      "name": "compare",
      "string": "bcrypt.compare()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "string"
        ],
        "optional": false,
        "name": "hash",
        "description": "Hash to extract the used number of rounds from"
      },
      {
        "type": "returns",
        "types": [
          "number"
        ],
        "description": "Number of rounds used"
      },
      {
        "type": "throws",
        "types": [
          "Error"
        ],
        "description": "If hash is not a string"
      },
      {
        "type": "expose",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "Gets the number of rounds used to encrypt the specified hash.",
      "summary": "Gets the number of rounds used to encrypt the specified hash.",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "bcrypt.getRounds = function(hash) {\n        if(typeof hash != \"string\") {\n            throw(new Error(\"Illegal type of 'hash': \"+(typeof hash)));\n        }\n        return parseInt(hash.split(\"$\")[2], 10);\n    };",
    "ctx": {
      "type": "method",
      "receiver": "bcrypt",
      "name": "getRounds",
      "string": "bcrypt.getRounds()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "string"
        ],
        "optional": false,
        "name": "hash",
        "description": "Hash to extract the salt from"
      },
      {
        "type": "returns",
        "types": [
          "string"
        ],
        "description": ""
      },
      {
        "type": "throws",
        "types": [
          "Error"
        ],
        "description": "If hash is not a string or otherwise invalid"
      },
      {
        "type": "expose",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "Gets the salt from a hash.",
      "summary": "Gets the salt from a hash.",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "bcrypt.getSalt = function(hash) {\n        if (typeof hash != 'string') {\n            throw(new Error(\"Illegal type of 'hash': \"+(typeof hash)));\n        }\n        if(hash.length != 60) {\n            throw(new Error(\"Illegal hash length: \"+hash.length+\" != 60\"));\n        }\n        return hash.substring(0, 29);\n    };\n    \n    return bcrypt;\n    \n})();",
    "ctx": {
      "type": "method",
      "receiver": "bcrypt",
      "name": "getSalt",
      "string": "bcrypt.getSalt()"
    }
  }
]